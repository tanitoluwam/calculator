{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Desktop/projects/calculator/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Keypad } from \"./components/keypad/Keypad\";\nimport { OutputScreen } from \"./components/outputScreen/OutputScreen\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [accValue, setAccValue] = useState(null);\n  const [screenValue, setScreenValue] = useState(\"0\");\n  const [currentOperator, setCurrentOperator] = useState(null);\n  const [expectsOperand, setExpectsOperand] = useState(false);\n  const allClear = () => {\n    setAccValue(null);\n    setScreenValue(\"0\");\n    setCurrentOperator(null);\n    setExpectsOperand(false);\n  };\n  const clearScreen = () => {\n    setScreenValue(\"0\");\n  };\n  const isScreenClear = screenValue === \"0\";\n  const percentage = () => {\n    setScreenValue(String(parseFloat(screenValue) / 100));\n  };\n  const addDecimalPoint = () => {\n    if (expectsOperand) {\n      setScreenValue(\"0.\");\n    } else {\n      if (!screenValue.includes(\".\")) setScreenValue(screenValue + \".\");\n    }\n    setExpectsOperand(false);\n  };\n  const handleClickNumericKey = value => {\n    if (expectsOperand) {\n      setScreenValue(String(value));\n      setExpectsOperand(false);\n    } else setScreenValue(screenValue === \"0\" ? String(value) : screenValue + value);\n  };\n  const handleClickFunctionKey = value => {\n    switch (value) {\n      case \"AC\":\n        allClear();\n        break;\n      case \"C\":\n        clearScreen();\n        break;\n      case \"%\":\n        percentage();\n        break;\n      case \".\":\n        addDecimalPoint();\n        break;\n      default:\n        break;\n    }\n  };\n  const handleClickOperator = operator => {\n    const inputValue = parseFloat(screenValue);\n    if (accValue === null) {\n      setAccValue(inputValue);\n    } else {\n      if (currentOperator) {\n        const resultValue = operate(currentOperator, accValue, inputValue);\n        setAccValue(resultValue);\n        setScreenValue(String(resultValue));\n      }\n    }\n    setExpectsOperand(true);\n    setCurrentOperator(operator);\n  };\n  const handleActionToPerform = (value, keyType) => {\n    switch (keyType) {\n      case \"fx\":\n        handleClickFunctionKey(value);\n        break;\n      case \"numeric\":\n        handleClickNumericKey(value);\n        break;\n      case \"operator\":\n        handleClickOperator(value);\n        break;\n      default:\n        break;\n    }\n  };\n  const operate = (operator, accValue, inputValue) => {\n    switch (operator) {\n      case \"+\":\n        return accValue + inputValue;\n      case \"-\":\n        return accValue - inputValue;\n      case \"x\":\n        return accValue * inputValue;\n      case \"/\":\n        return accValue / inputValue;\n      case \"=\":\n        return inputValue;\n      default:\n        break;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-white font-thin flex-col flex-wrap justify-center items-center calculator-view\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col flex-wrap justify-between items-center viewport\",\n      children: [/*#__PURE__*/_jsxDEV(OutputScreen, {\n        value: screenValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Keypad, {\n        actionToPerform: handleActionToPerform,\n        allClear: isScreenClear\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"5K/8jSM1YzCatua9WIAzhtHle0k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Keypad","OutputScreen","App","accValue","setAccValue","screenValue","setScreenValue","currentOperator","setCurrentOperator","expectsOperand","setExpectsOperand","allClear","clearScreen","isScreenClear","percentage","String","parseFloat","addDecimalPoint","includes","handleClickNumericKey","value","handleClickFunctionKey","handleClickOperator","operator","inputValue","resultValue","operate","handleActionToPerform","keyType"],"sources":["/Users/apple/Desktop/projects/calculator/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Keypad } from \"./components/keypad/Keypad\";\nimport { OutputScreen } from \"./components/outputScreen/OutputScreen\";\n\nconst App = () => {\n  const [accValue, setAccValue] = useState(null);\n  const [screenValue, setScreenValue] = useState(\"0\");\n  const [currentOperator, setCurrentOperator] = useState(null);\n  const [expectsOperand, setExpectsOperand] = useState(false);\n\n  const allClear = () => {\n    setAccValue(null);\n    setScreenValue(\"0\");\n    setCurrentOperator(null);\n    setExpectsOperand(false);\n  };\n\n  const clearScreen = () => {\n    setScreenValue(\"0\");\n  };\n  const isScreenClear = screenValue === \"0\";\n\n  const percentage = () => {\n    setScreenValue(String(parseFloat(screenValue) / 100));\n  };\n\n  const addDecimalPoint = () => {\n    if (expectsOperand) {\n      setScreenValue(\"0.\");\n    } else {\n      if (!screenValue.includes(\".\")) setScreenValue(screenValue + \".\");\n    }\n    setExpectsOperand(false);\n  };\n\n  const handleClickNumericKey = (value) => {\n    if (expectsOperand) {\n      setScreenValue(String(value));\n      setExpectsOperand(false);\n    } else\n      setScreenValue(screenValue === \"0\" ? String(value) : screenValue + value);\n  };\n\n  const handleClickFunctionKey = (value) => {\n    switch (value) {\n      case \"AC\":\n        allClear();\n        break;\n      case \"C\":\n        clearScreen();\n        break;\n      case \"%\":\n        percentage();\n        break;\n      case \".\":\n        addDecimalPoint();\n        break;\n      default :\n      break;\n    }\n  };\n  const handleClickOperator = (operator) => {\n    const inputValue = parseFloat(screenValue);\n    if (accValue === null) {\n      setAccValue(inputValue);\n    } else {\n      if (currentOperator) {\n        const resultValue = operate(currentOperator, accValue, inputValue);\n        setAccValue(resultValue);\n        setScreenValue(String(resultValue));\n      }\n    }\n    setExpectsOperand(true);\n    setCurrentOperator(operator);\n  };\n\n  const handleActionToPerform = (value, keyType) => {\n    switch (keyType) {\n      case \"fx\":\n        handleClickFunctionKey(value);\n        break;\n      case \"numeric\":\n        handleClickNumericKey(value);\n        break;\n      case \"operator\":\n        handleClickOperator(value);\n        break;\n      default :\n      break;  \n    }\n  };\n\n  const operate = (operator, accValue, inputValue) => {\n    switch (operator) {\n      case \"+\":\n        return accValue + inputValue;\n      case \"-\":\n        return accValue - inputValue;\n      case \"x\":\n        return accValue * inputValue;\n      case \"/\":\n        return accValue / inputValue;\n      case \"=\":\n        return inputValue;\n      default:\n      break;  \n    }\n  };\n  return (\n    <div className=\"text-white font-thin flex-col flex-wrap justify-center items-center calculator-view\">\n      <div className=\"flex flex-col flex-wrap justify-between items-center viewport\">\n        <OutputScreen value={screenValue} />\n        <Keypad\n          actionToPerform={handleActionToPerform}\n          allClear={isScreenClear}\n        />\n      </div>\n    </div>\n  );\n};\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}