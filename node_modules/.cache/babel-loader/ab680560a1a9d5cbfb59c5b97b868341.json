{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nconst btnActions = {\n  multiply: \"multiply\",\n  divide: \"divide\",\n  add: \"add\",\n  subtract: \"subtract\",\n  clear: \"clear\",\n  percent: \"percent\"\n};\nexport const useCalculator = () => {\n  _s();\n\n  const [accValue, setAccValue] = useState(null);\n  const [screenValue, setScreenValue] = useState(\"0\");\n  const [currentOperator, setCurrentOperator] = useState(null);\n  const [expectsOperand, setExpectsOperand] = useState(false);\n\n  const handleActionToPerform = (value, keyType) => {\n    switch (keyType) {\n      case \"fx\":\n        handleClickFunctionKey(value);\n        break;\n\n      case \"numeric\":\n        handleClickNumericKey(value);\n        break;\n\n      case \"operator\":\n        handleClickOperator(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleClickFunctionKey = value => {\n    switch (value) {\n      case \"AC\":\n        allClear();\n        break;\n\n      case \"C\":\n        clearScreen();\n        break;\n\n      case \"+/-\":\n        reverseSign();\n        break;\n\n      case \"%\":\n        percentage();\n        break;\n\n      case \".\":\n        addDecimalPoint();\n        break;\n    }\n  };\n\n  const allClear = () => {\n    setAccValue(null);\n    setScreenValue(\"0\");\n    setCurrentOperator(null);\n    setExpectsOperand(false);\n  };\n\n  const clearScreen = () => {\n    setScreenValue(\"0\");\n  };\n\n  const isScreenClear = screenValue === \"0\";\n\n  const reverseSign = () => {\n    setScreenValue(String(-parseFloat(screenValue)));\n  };\n\n  const percentage = () => {\n    setScreenValue(String(parseFloat(screenValue) / 100));\n  };\n\n  const addDecimalPoint = () => {\n    if (expectsOperand) {\n      setScreenValue(\"0.\");\n    } else {\n      if (!screenValue.includes(\".\")) setScreenValue(screenValue + \".\");\n    }\n\n    setExpectsOperand(false);\n  };\n\n  const handleClickNumericKey = value => {\n    if (expectsOperand) {\n      setScreenValue(String(value));\n      setExpectsOperand(false);\n    } else setScreenValue(screenValue === \"0\" ? String(value) : screenValue + value);\n  };\n\n  const handleClickOperator = operator => {\n    const inputValue = parseFloat(screenValue);\n\n    if (accValue === null) {\n      setAccValue(inputValue);\n    } else {\n      if (currentOperator) {\n        const resultValue = operate(currentOperator, accValue, inputValue);\n        setAccValue(resultValue);\n        setScreenValue(String(resultValue));\n      }\n    }\n\n    setExpectsOperand(true);\n    setCurrentOperator(operator);\n  };\n\n  const operate = (operator, accValue, inputValue) => {\n    switch (operator) {\n      case \"+\":\n        return accValue + inputValue;\n\n      case \"-\":\n        return accValue - inputValue;\n\n      case \"x\":\n        return accValue * inputValue;\n\n      case \"/\":\n        return accValue / inputValue;\n\n      case \"=\":\n        return inputValue;\n    }\n  };\n\n  return {\n    handleActionToPerform,\n    accValue,\n    screenValue,\n    expectsOperand,\n    isScreenClear\n  };\n};\n\n_s(useCalculator, \"5K/8jSM1YzCatua9WIAzhtHle0k=\");","map":{"version":3,"names":["React","useState","btnActions","multiply","divide","add","subtract","clear","percent","useCalculator","accValue","setAccValue","screenValue","setScreenValue","currentOperator","setCurrentOperator","expectsOperand","setExpectsOperand","handleActionToPerform","value","keyType","handleClickFunctionKey","handleClickNumericKey","handleClickOperator","allClear","clearScreen","reverseSign","percentage","addDecimalPoint","isScreenClear","String","parseFloat","includes","operator","inputValue","resultValue","operate"],"sources":["/Users/apple/Desktop/projects/calculator/calculator/src/hook/useCalculator.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst btnActions = {\n  multiply: \"multiply\",\n  divide: \"divide\",\n  add: \"add\",\n  subtract: \"subtract\",\n  clear: \"clear\",\n  percent: \"percent\",\n};\n\nexport const useCalculator = () => {\n  const [accValue, setAccValue] = useState(null);\n  const [screenValue, setScreenValue] = useState(\"0\");\n  const [currentOperator, setCurrentOperator] = useState(null);\n  const [expectsOperand, setExpectsOperand] = useState(false);\n\n  const handleActionToPerform = (value, keyType) => {\n    switch (keyType) {\n      case \"fx\":\n        handleClickFunctionKey(value);\n        break;\n      case \"numeric\":\n        handleClickNumericKey(value);\n        break;\n      case \"operator\":\n        handleClickOperator(value);\n        break;\n    default:\n        break;\n    }\n  };\n\n  const handleClickFunctionKey = (value) => {\n    switch (value) {\n      case \"AC\":\n        allClear();\n        break;\n      case \"C\":\n        clearScreen();\n        break;\n      case \"+/-\":\n        reverseSign();\n        break;\n      case \"%\":\n        percentage();\n        break;\n      case \".\":\n        addDecimalPoint();\n        break;\n    }\n  };\n\n  const allClear = () => {\n    setAccValue(null);\n    setScreenValue(\"0\");\n    setCurrentOperator(null);\n    setExpectsOperand(false);\n  };\n\n  const clearScreen = () => {\n    setScreenValue(\"0\");\n  };\n\n  const isScreenClear = screenValue === \"0\";\n\n  const reverseSign = () => {\n    setScreenValue(String(-parseFloat(screenValue)));\n  };\n\n  const percentage = () => {\n    setScreenValue(String(parseFloat(screenValue) / 100));\n  };\n\n  const addDecimalPoint = () => {\n    if (expectsOperand) {\n      setScreenValue(\"0.\");\n    } else {\n      if (!screenValue.includes(\".\")) setScreenValue(screenValue + \".\");\n    }\n    setExpectsOperand(false);\n  };\n\n  const handleClickNumericKey = (value) => {\n    if (expectsOperand) {\n      setScreenValue(String(value));\n      setExpectsOperand(false);\n    } else\n      setScreenValue(screenValue === \"0\" ? String(value) : screenValue + value);\n  };\n\n  const handleClickOperator = (operator) => {\n    const inputValue = parseFloat(screenValue);\n    if (accValue === null) {\n      setAccValue(inputValue);\n    } else {\n      if (currentOperator) {\n        const resultValue = operate(currentOperator, accValue, inputValue);\n        setAccValue(resultValue);\n        setScreenValue(String(resultValue));\n      }\n    }\n    setExpectsOperand(true);\n    setCurrentOperator(operator);\n  };\n\n  const operate = (operator, accValue, inputValue) => {\n    switch (operator) {\n       case \"+\": return accValue + inputValue;\n       case \"-\": return accValue - inputValue;\n       case \"x\": return accValue * inputValue;\n       case \"/\": return accValue / inputValue;\n       case \"=\": return inputValue;\n    }\n }\n\n  return {\n    handleActionToPerform,\n    accValue,\n    screenValue,\n    expectsOperand,\n    isScreenClear\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}