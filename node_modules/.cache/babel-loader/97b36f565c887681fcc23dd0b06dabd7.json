{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Desktop/projects/calculator/calculator/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Keypad } from \"./components/keypad/Keypad\";\nimport { OutputScreen } from \"./components/outputScreen/OutputScreen\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [accValue, setAccValue] = useState(null);\n  const [screenValue, setScreenValue] = useState(\"0\");\n  const [currentOperator, setCurrentOperator] = useState(null);\n  const [expectsOperand, setExpectsOperand] = useState(false);\n\n  const allClear = () => {\n    setAccValue(null);\n    setScreenValue(\"0\");\n    setCurrentOperator(null);\n    setExpectsOperand(false);\n  };\n\n  const clearScreen = () => {\n    setScreenValue(\"0\");\n  };\n\n  const isScreenClear = screenValue === \"0\";\n\n  const percentage = () => {\n    setScreenValue(String(parseFloat(screenValue) / 100));\n  };\n\n  const addDecimalPoint = () => {\n    if (expectsOperand) {\n      setScreenValue(\"0.\");\n    } else {\n      if (!screenValue.includes(\".\")) setScreenValue(screenValue + \".\");\n    }\n\n    setExpectsOperand(false);\n  };\n\n  const handleClickNumericKey = value => {\n    if (expectsOperand) {\n      setScreenValue(String(value));\n      setExpectsOperand(false);\n    } else setScreenValue(screenValue === \"0\" ? String(value) : screenValue + value);\n  };\n\n  const handleClickFunctionKey = value => {\n    switch (value) {\n      case \"AC\":\n        allClear();\n        break;\n\n      case \"C\":\n        clearScreen();\n        break;\n\n      case \"%\":\n        percentage();\n        break;\n\n      case \".\":\n        addDecimalPoint();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleClickOperator = operator => {\n    const inputValue = parseFloat(screenValue);\n\n    if (accValue === null) {\n      setAccValue(inputValue);\n    } else {\n      if (currentOperator) {\n        const resultValue = operate(currentOperator, accValue, inputValue);\n        setAccValue(resultValue);\n        setScreenValue(String(resultValue));\n      }\n    }\n\n    setExpectsOperand(true);\n    setCurrentOperator(operator);\n  };\n\n  const handleActionToPerform = (value, keyType) => {\n    switch (keyType) {\n      case \"fx\":\n        handleClickFunctionKey(value);\n        break;\n\n      case \"numeric\":\n        handleClickNumericKey(value);\n        break;\n\n      case \"operator\":\n        handleClickOperator(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const operate = (operator, accValue, inputValue) => {\n    switch (operator) {\n      case \"+\":\n        return accValue + inputValue;\n\n      case \"-\":\n        return accValue - inputValue;\n\n      case \"x\":\n        return accValue * inputValue;\n\n      case \"/\":\n        return accValue / inputValue;\n\n      case \"=\":\n        return inputValue;\n\n      default:\n        break;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"calculator-view\",\n    className: \"text-white font-normal flex column jc-center ai-center\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"viewport\",\n      className: \"flex column jc-sp-between ai-center\",\n      children: [/*#__PURE__*/_jsxDEV(OutputScreen, {\n        value: screenValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Keypad, {\n        actionToPerform: handleActionToPerform,\n        allClear: isScreenClear\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"5K/8jSM1YzCatua9WIAzhtHle0k=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Keypad","OutputScreen","App","accValue","setAccValue","screenValue","setScreenValue","currentOperator","setCurrentOperator","expectsOperand","setExpectsOperand","allClear","clearScreen","isScreenClear","percentage","String","parseFloat","addDecimalPoint","includes","handleClickNumericKey","value","handleClickFunctionKey","handleClickOperator","operator","inputValue","resultValue","operate","handleActionToPerform","keyType"],"sources":["/Users/apple/Desktop/projects/calculator/calculator/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Keypad } from \"./components/keypad/Keypad\";\nimport { OutputScreen } from \"./components/outputScreen/OutputScreen\";\n\nconst App = () => {\n  const [accValue, setAccValue] = useState(null);\n  const [screenValue, setScreenValue] = useState(\"0\");\n  const [currentOperator, setCurrentOperator] = useState(null);\n  const [expectsOperand, setExpectsOperand] = useState(false);\n\n  const allClear = () => {\n    setAccValue(null);\n    setScreenValue(\"0\");\n    setCurrentOperator(null);\n    setExpectsOperand(false);\n  };\n\n  const clearScreen = () => {\n    setScreenValue(\"0\");\n  };\n  const isScreenClear = screenValue === \"0\";\n\n  const percentage = () => {\n    setScreenValue(String(parseFloat(screenValue) / 100));\n  };\n\n  const addDecimalPoint = () => {\n    if (expectsOperand) {\n      setScreenValue(\"0.\");\n    } else {\n      if (!screenValue.includes(\".\")) setScreenValue(screenValue + \".\");\n    }\n    setExpectsOperand(false);\n  };\n\n  const handleClickNumericKey = (value) => {\n    if (expectsOperand) {\n      setScreenValue(String(value));\n      setExpectsOperand(false);\n    } else\n      setScreenValue(screenValue === \"0\" ? String(value) : screenValue + value);\n  };\n\n  const handleClickFunctionKey = (value) => {\n    switch (value) {\n      case \"AC\":\n        allClear();\n        break;\n      case \"C\":\n        clearScreen();\n        break;\n      case \"%\":\n        percentage();\n        break;\n      case \".\":\n        addDecimalPoint();\n        break;\n      default :\n      break;\n    }\n  };\n  const handleClickOperator = (operator) => {\n    const inputValue = parseFloat(screenValue);\n    if (accValue === null) {\n      setAccValue(inputValue);\n    } else {\n      if (currentOperator) {\n        const resultValue = operate(currentOperator, accValue, inputValue);\n        setAccValue(resultValue);\n        setScreenValue(String(resultValue));\n      }\n    }\n    setExpectsOperand(true);\n    setCurrentOperator(operator);\n  };\n\n  const handleActionToPerform = (value, keyType) => {\n    switch (keyType) {\n      case \"fx\":\n        handleClickFunctionKey(value);\n        break;\n      case \"numeric\":\n        handleClickNumericKey(value);\n        break;\n      case \"operator\":\n        handleClickOperator(value);\n        break;\n      default :\n      break;  \n    }\n  };\n\n  const operate = (operator, accValue, inputValue) => {\n    switch (operator) {\n      case \"+\":\n        return accValue + inputValue;\n      case \"-\":\n        return accValue - inputValue;\n      case \"x\":\n        return accValue * inputValue;\n      case \"/\":\n        return accValue / inputValue;\n      case \"=\":\n        return inputValue;\n      default:\n      break;  \n    }\n  };\n  return (\n    <div id=\"calculator-view\" className=\"text-white font-normal flex column jc-center ai-center\">\n      <div id=\"viewport\" className=\"flex column jc-sp-between ai-center\">\n        <OutputScreen value={screenValue} />\n        <Keypad\n          actionToPerform={handleActionToPerform}\n          allClear={isScreenClear}\n        />\n      </div>\n    </div>\n  );\n};\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}