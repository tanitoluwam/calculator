{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\nconst btnActions = {\n  multiply: \"multiply\",\n  divide: \"divide\",\n  add: \"add\",\n  subtract: \"subtract\",\n  clear: \"clear\",\n  percent: \"percent\"\n};\nconst initialPayload = {\n  result: 0,\n  currentInput: 0,\n  oldInput: 0,\n  action: null\n};\nexport const useCalculator = () => {\n  _s();\n\n  const [calc, setCalc] = React.useState(initialPayload);\n  const arithmeticOperations = [\"*\", \"/\", \"+\", \"-\"];\n  const {\n    currentInput,\n    oldInput,\n    action,\n    result\n  } = calc;\n\n  const selectNumbers = label => {\n    setCalc({ ...calc,\n      currentInput: Number(label)\n    }); // if (calc.action?.length) {\n    //   setCalc({\n    //     ...calc,\n    //     oldInput: currentInput,\n    //     currentInput: Number(`${calc.currentInput}${label}`),\n    //   });\n    // } else {\n    //   setCalc({\n    //     ...calc,\n    //     currentInput: Number(`${calc.currentInput}${label}`),\n    //   });\n    // }\n  };\n\n  const addNumbers = () => {\n    setCalc({ ...calc,\n      action: btnActions.add,\n      oldInput: currentInput + oldInput,\n      result: currentInput + oldInput\n    });\n  };\n\n  const subtractNumbers = () => {\n    if (oldInput !== 0 && currentInput !== 0) {\n      setCalc({ ...calc,\n        currentInput: oldInput - currentInput,\n        action: btnActions.subtract,\n        result: oldInput - currentInput\n      });\n    } else {\n      setCalc({ ...calc,\n        action: \"subtract\"\n      });\n    }\n  };\n\n  const multiplyNumbers = () => {\n    setCalc({ ...calc,\n      action: btnActions.multiply,\n      oldInput: parseInt(calc.currentInput) * parseInt(calc.oldInput),\n      result: parseInt(calc.currentInput) * parseInt(calc.oldInput)\n    });\n  };\n\n  const divideNumbers = () => {\n    setCalc({ ...calc,\n      action: btnActions.divide,\n      oldInput: parseInt(calc.currentInput) / parseInt(calc.oldInput),\n      result: parseInt(calc.currentInput) / parseInt(calc.oldInput)\n    });\n  };\n\n  const clearNumbers = () => {\n    setCalc(initialPayload);\n  };\n\n  const getFinalResult = () => {\n    switch (action) {\n      case btnActions.add:\n        setCalc({ ...calc,\n          result: Number(calc.oldInput) + Number(calc.currentInput)\n        });\n        break;\n\n      case btnActions.divide:\n        setCalc({ ...calc,\n          result: Number(calc.oldInput) / Number(calc.currentInput)\n        });\n        break;\n\n      case btnActions.multiply:\n        setCalc({ ...calc,\n          result: Number(calc.oldInput) * Number(calc.currentInput)\n        });\n        break;\n\n      case btnActions.percent:\n        setCalc({ ...calc,\n          result: Number(calc.oldInput) % Number(calc.currentInput)\n        });\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return {\n    addNumbers,\n    subtractNumbers,\n    multiplyNumbers,\n    divideNumbers,\n    selectNumbers,\n    clearNumbers,\n    getFinalResult,\n    currentInput,\n    result\n  };\n};\n\n_s(useCalculator, \"EK8lsIQp+X3Y5dScHDdt7tOQV3E=\");","map":{"version":3,"names":["React","btnActions","multiply","divide","add","subtract","clear","percent","initialPayload","result","currentInput","oldInput","action","useCalculator","calc","setCalc","useState","arithmeticOperations","selectNumbers","label","Number","addNumbers","subtractNumbers","multiplyNumbers","parseInt","divideNumbers","clearNumbers","getFinalResult"],"sources":["/Users/apple/Desktop/projects/calculator/calculator/src/hook/useCalculator.js"],"sourcesContent":["import React from \"react\";\n\nconst btnActions = {\n  multiply: \"multiply\",\n  divide: \"divide\",\n  add: \"add\",\n  subtract: \"subtract\",\n  clear: \"clear\",\n  percent: \"percent\",\n};\n\nconst initialPayload = {\n  result: 0,\n  currentInput: 0,\n  oldInput: 0,\n  action: null,\n};\n\nexport const useCalculator = () => {\n  const [calc, setCalc] = React.useState(initialPayload);\n  const arithmeticOperations = [\"*\", \"/\", \"+\", \"-\"];\n\n  const { currentInput, oldInput, action, result } = calc;\n\n  const selectNumbers = (label) => {\n    setCalc({\n        ...calc,\n        currentInput: Number(label)\n    })\n    // if (calc.action?.length) {\n    //   setCalc({\n    //     ...calc,\n    //     oldInput: currentInput,\n    //     currentInput: Number(`${calc.currentInput}${label}`),\n    //   });\n    // } else {\n    //   setCalc({\n    //     ...calc,\n    //     currentInput: Number(`${calc.currentInput}${label}`),\n    //   });\n    // }\n  };\n\n  const addNumbers = () => {\n    setCalc({\n      ...calc,\n      action: btnActions.add,\n      oldInput: currentInput + oldInput,\n      result: currentInput + oldInput,\n    });\n  };\n\n  const subtractNumbers = () => {\n    if (oldInput !== 0 && currentInput !== 0) {\n      setCalc({\n        ...calc,\n        currentInput: oldInput - currentInput,\n        action: btnActions.subtract,\n        result: oldInput - currentInput,\n      });\n    } else {\n      setCalc({\n        ...calc,\n        action: \"subtract\",\n      });\n    }\n  };\n\n  const multiplyNumbers = () => {\n    setCalc({\n      ...calc,\n      action: btnActions.multiply,\n      oldInput: parseInt(calc.currentInput) * parseInt(calc.oldInput),\n      result: parseInt(calc.currentInput) * parseInt(calc.oldInput),\n    });\n  };\n\n  const divideNumbers = () => {\n    setCalc({\n      ...calc,\n      action: btnActions.divide,\n      oldInput: parseInt(calc.currentInput) / parseInt(calc.oldInput),\n      result: parseInt(calc.currentInput) / parseInt(calc.oldInput),\n    });\n  };\n\n  const clearNumbers = () => {\n    setCalc(initialPayload);\n  };\n\n  const getFinalResult = () => {\n    switch (action) {\n      case btnActions.add:\n        setCalc({\n          ...calc,\n          result: Number(calc.oldInput) + Number(calc.currentInput),\n        });\n        break;\n      case btnActions.divide:\n        setCalc({\n          ...calc,\n          result: Number(calc.oldInput) / Number(calc.currentInput),\n        });\n        break;\n      case btnActions.multiply:\n        setCalc({\n          ...calc,\n          result: Number(calc.oldInput) * Number(calc.currentInput),\n        });\n        break;\n      case btnActions.percent:\n        setCalc({\n          ...calc,\n          result: Number(calc.oldInput) % Number(calc.currentInput),\n        });\n        break;\n      default:\n        break;\n    }\n  };\n\n  return {\n    addNumbers,\n    subtractNumbers,\n    multiplyNumbers,\n    divideNumbers,\n    selectNumbers,\n    clearNumbers,\n    getFinalResult,\n    currentInput,\n    result,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}